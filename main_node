#include "ros/ros.h"
#include "ros/duration"

#include <message_filters/subscriber.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <message_filters/synchronizer.h>
#include <message_filters/connection.h>
#include <boost/bind.hpp>

#include <dynamic_reconfigure/server.h>
#include <odometry/parametersConfig.h>
 
 // Output-related libraries
#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>

#include "odometry/floatStamped.h"
#include "odometry/CustomOdometry.h"

//Values given by the text
#define BASELINE 0.583
#define RADIUS 0.1575

//Default values given by the text
#define INIT_POSITION_X 0.0
#define INIT_POSITION_Y 0.0
#define INIT_POSITION_THETA 0.0
#define INIT_VELOCITY_X 0.0
#define INIT_VELOCITY_Y 0.0
#define INIT_ANGULAR_VELOCITY 0.0
#define INIT_VELOCITY_LEFT 0.0
#define INIT_VELOCITY_RIGHT 0.0

//Approximation choice
#define EULER_APPROXIMATION true
#define RUNGE_KUTTA_APPROXIMATION false

//Topic/Frame Description
#define FRAME_ID "world"
#define CHILD_FRAME_ID "base_link"
#define TOPIC_ID "odometry"
#define CUSTOM_TOPIC_ID "customOdometry"

//Struct for odometry pose
#typedef struct odometry_values{
    double x;
    double y;
    double theta;

    double v_x;
    double v_y;
    double omega;
    double steer;
    double v_r;
    double v_l;
} OdometryValues;

#typedef struct skid_steering_variables{
    double omega_r;
    double omega_l;
} SkidSteeringVariables;

odometry::parametersConfig last_config;
OdometryValues odometry_values;
double last_msg_time;


void configModeCallback(odometry::parametersConfig &config, uint32_t level){
    if(config.odometry_model_mode!=last_config.odometry_model_mode) {
       ROS_INFO("Approximation changed: changing odometry model to: \t%s", config.odometry_model_mode?"Runge Kutta":"Euler");
       last_config.odometry_model_mode = config.odometry_model_mode; 
    } 
    if(config.odometry_set_position){
        ROS_INFO("Position changed: setting position to: \t(X: %f, Y: %f)", config.odometry_x_position, config.odometry_y_position);
        odometry_values.x = config.odometry_x_position;
        odometry_values.y = config.odometry_y_position;
    } else if(config.odometry_reset_default){
        ROS_INFO("Position changed: setting position to: \t(X: %f, Y: %f)", INIT_POSITION_X,INIT_POSITION_Y);
        reset_odometry_to_init();
    }
     
}


//Service for reset the odometry to initial pose
void reset_odometry_to_init(){
    odometry_values.x = INIT_POSITION_X;
    odometry_values.y = INIT_POSITION_Y;
    odometry_values.theta = INIT_POSITION_THETA;
}

//Service for reset the odometry to pose(x,y,theta)
void reset_odometry_to_pose(double x, double y, double theta){
    odometry_values.x = x;
    odometry_values.y = y;
    odometry_values.theta = theta;
}

void Euler_Approximation(double sample_time, double speed_r, double speed_l, OdometryValues& approximate_values){

    double linear_velocity = (odometry_values.v_r + odometry_values.v_l) / 2;
    double angular_velocity = odometry_values.omega;
    double delta_theta = angular_velocity * sample_time;

   
    double Lambda = (odometry_values.v_r + odometry_values.v_l)/(odometry_values.v_r - odometry_values.v_l);
    double y0 = RADIUS/Lambda;
    double apparent_baseline = 2y0;

    approximate_values.theta = odometry_values.theta + delta_theta;

    approximate_values.x = odometry_values.x + linear_velocity * sample_time * cos(odometry_values.theta);
    approximate_values.y = odometry_values.y + linear_velocity * sample_time * sen(odometry_values.theta);

    approximate_values.omega = (speed_r - speed_l)/ apparent_baseline;

    approximate_values.v_x = ((speed_r - speed_l)/2) * cos(approximate_values.theta);
    approximate_values.v_y = ((speed_r - speed_l)/2) * sen(approximate_values.theta);

    approximate_values.v_r = speed_r;
    approximate_values.v_l = speed_l;

}

void Runge_Kutta_Approximation(double sample_time, double speed_r, double speed_l, OdometryValues& approximate_values){

    double linear_velocity = (odometry_values.v_r + odometry_values.v_l) / 2;
    double angular_velocity = odometry_values.omega;
    double delta_theta = angular_velocity * sample_time;

    
    double Lambda = (odometry_values.v_r + odometry_values.v_l)/(odometry_values.v_r - odometry_values.v_l);
    double y0 = RADIUS/Lambda;
    double apparent_baseline = 2y0;

    approximate_values.theta = odometry_values.theta + delta_theta;

    approximate_values.x = odometry_values.x + linear_velocity * sample_time * cos(odometry_values.theta + (angular_velocity * sample_time)/2);
    approximate_values.y = odometry_values.y + linear_velocity * sample_time * sen(odometry_values.theta + (angular_velocity * sample_time)/2);

    approximate_values.omega = (speed_r - speed_l)/ apparent_baseline;

    approximate_values.v_x = ((speed_r - speed_l)/2) * cos(approximate_values.theta);
    approximate_values.v_y = ((speed_r - speed_l)/2) * sen(approximate_values.theta);

    approximate_values.v_r = speed_r;
    approximate_values.v_l = speed_l;

}

nav_msgs::Odometry setOdometry(){

    nav_msgs::Odometry odometry;
    odometry.header.stamp = ros::Time::now();
    odometry.header.frame_id = FRAME_ID;

    odometry.pose.pose.position.x = odometry_values.x;
    odometry.pose.pose.position.y = odometry_values.y;
    odometry.pose.pose.position.z = 0.0;
    odometry.pose.pose.orientation = tf::createQuaternionMsgFromYaw(odometry_values.theta);

    odometry.child_frame_id = CHILD_FRAME_ID;
    odometry.twist.twist.velocity.left = odometry_values.v_l;
    odometry.twist.twist.velocity.right = odometry_values.v_r;

    return odometry;
}

//per associare ad ogni odometry l'approssimazione scelta dall'utente
odometry::CustomOdometry customOdometry(nav_msgs::Odometry odometry, string approxMode){

    odometry::CustomOdometry customOdometry;
    customOdometry.odometry = odometry;

    customOdometry.odometryMode.data = approxMode;

    return customOdometry;
}

void subCallback(const odometry::floatStamped::Const& left, const odometry::floatStamped::Const& right, tf::TransformBroadcaster& broadcaster, ros::Publisher& publisherOdometry, ros::Publisher& publisherCustomOdometry){
   
    string odometryModel;
    OdometryValues new_odometry_values;

    if(last_config.odometry_model_mode == EULER_APPROXIMATION){
        Euler_Approximation(delta_time, right->data, left->data, new_odometry_values);
        odometryModel = "Euler Approximation";
    } else if(last_config.odometry_model_mode == RUNGE_KUTTA_APPROXIMATION){
        Runge_Kutta_Approximation(delta_time, right->data, left->data, new_odometry_values);
        odometryModel = "Runge Kutta Approximation";
    } else {
        ROS_INFO("ERROR CONFIG!");
    }

    odometry_values = new_odometry_values;
}

int main(int argc, char *argv[]){

    ros::init(argc,argv,"main_node");
    ros::NodeHandle n;

    //initialization
    reset_odometry_to_init();

    odometry_values.v_r = INIT_VELOCITY_RIGHT;
    odometry_values.v_l = INIT_VELOCITY_LEFT;
    odometry_values.v_x = INIT_VELOCITY_X;
    odometry_values.v_y = INIT_VELOCITY_Y;
    odometry_values.omega = INIT_ANGULAR_VELOCITY;
    last_msg_time = ros::Time::now().toSec();

    dynamic_reconfigure::Server<odometry::parametersConfig> config_server;
    config_server.setCallback(boost::bind(&configModeCallback, _1, _2));

    tf::TransformBroadcaster odom_broadcaster;
    ros::Publisher odometry_publisher = n.advertise<nav_msgs::Odometry>(TOPIC_ID, 25);
    ros::Publisher custom_odometry_publisher = n.advertise<nav_msgs::CustomOdometry>(CUSTOM_TOPIC_ID, 25);

    ROS_INFO("NODE STARTED\n");

    message_filters::Subscriber<odometry::floatStamped> left_velocity_sub(n, "LEFT_VELOCITY", 1);
     message_filters::Subscriber<odometry::floatStamped> right_velocity_sub(n, "RIGHT_VELOCITY", 1);

    
    

}